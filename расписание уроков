import telebot
from telebot import types
import json
import os
from datetime import datetime
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot('YOUR_BOT_TOKEN_HERE')  # –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –í–ê–® –¢–û–ö–ï–ù!

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
SCHEDULE_FILE = 'schedule.json'

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞
def load_schedule():
    try:
        if os.path.exists(SCHEDULE_FILE):
            with open(SCHEDULE_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        return {}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
        return {}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ —Ñ–∞–π–ª
def save_schedule(schedule):
    try:
        with open(SCHEDULE_FILE, 'w', encoding='utf-8') as f:
            json.dump(schedule, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")

# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
def get_weekday():
    days = ['–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–≤—Ç–æ—Ä–Ω–∏–∫', '—Å—Ä–µ–¥—É', '—á–µ—Ç–≤–µ—Ä–≥', '–ø—è—Ç–Ω–∏—Ü—É', '—Å—É–±–±–æ—Ç—É', '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']
    return days[datetime.today().weekday()]

# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton('üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è')
    btn2 = types.KeyboardButton('üìã –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é')
    btn3 = types.KeyboardButton('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
    markup.add(btn1, btn2, btn3)
    
    bot.send_message(
        message.chat.id,
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! üëã\n"
        "–Ø –±–æ—Ç –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —É—Ä–æ–∫–æ–≤.\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=markup
    )

# –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
@bot.message_handler(func=lambda message: message.text == 'üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è')
def today_schedule(message):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")
    schedule = load_schedule()
    today = get_weekday()
    
    if today in schedule and schedule[today]:
        response = f"üìö –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {today}:\n\n"
        for i, lesson in enumerate(schedule[today], 1):
            response += f"{i}. {lesson}\n"
    else:
        response = f"–ù–∞ {today} —É—Ä–æ–∫–æ–≤ –Ω–µ—Ç üéâ"
    
    bot.send_message(message.chat.id, response)

# –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é
@bot.message_handler(func=lambda message: message.text == 'üìã –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é')
def week_schedule(message):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é")
    schedule = load_schedule()
    days = ['–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–≤—Ç–æ—Ä–Ω–∏–∫', '—Å—Ä–µ–¥—É', '—á–µ—Ç–≤–µ—Ä–≥', '–ø—è—Ç–Ω–∏—Ü—É', '—Å—É–±–±–æ—Ç—É']
    
    response = "üìö –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é:\n\n"
    for day in days:
        response += f"**{day.capitalize()}**:\n"
        if day in schedule and schedule[day]:
            for i, lesson in enumerate(schedule[day], 1):
                response += f"  {i}. {lesson}\n"
        else:
            response += "  –£—Ä–æ–∫–æ–≤ –Ω–µ—Ç\n"
        response += "\n"
    
    bot.send_message(message.chat.id, response)

# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
@bot.message_handler(func=lambda message: message.text == '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
def edit_schedule(message):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
    markup = types.InlineKeyboardMarkup()
    days = [
        ('–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', 'monday'),
        ('–í—Ç–æ—Ä–Ω–∏–∫', 'tuesday'),
        ('–°—Ä–µ–¥–∞', 'wednesday'),
        ('–ß–µ—Ç–≤–µ—Ä–≥', 'thursday'),
        ('–ü—è—Ç–Ω–∏—Ü–∞', 'friday'),
        ('–°—É–±–±–æ—Ç–∞', 'saturday')
    ]
    
    for day_name, day_key in days:
        markup.add(types.InlineKeyboardButton(day_name, callback_data=f'edit_{day_key}'))
    
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –¥–µ–Ω—å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback'–æ–≤
@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    if call.data.startswith('edit_'):
        day_key = call.data[5:]
        day_names = {
            'monday': '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
            'tuesday': '–≤—Ç–æ—Ä–Ω–∏–∫',
            'wednesday': '—Å—Ä–µ–¥—É',
            'thursday': '—á–µ—Ç–≤–µ—Ä–≥',
            'friday': '–ø—è—Ç–Ω–∏—Ü—É',
            'saturday': '—Å—É–±–±–æ—Ç—É'
        }
        
        day_name = day_names[day_key]
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.id} —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç {day_name}")
        msg = bot.send_message(
            call.message.chat.id,
            f"–í–≤–µ–¥–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {day_name} (–∫–∞–∂–¥—ã–π —É—Ä–æ–∫ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏):"
        )
        bot.register_next_step_handler(msg, save_day_schedule, day_name)

def save_day_schedule(message, day_name):
    lessons = message.text.split('\n')
    # –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    lessons = [lesson.strip() for lesson in lessons if lesson.strip()]
    
    schedule = load_schedule()
    schedule[day_name] = lessons
    save_schedule(schedule)
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} —Å–æ—Ö—Ä–∞–Ω–∏–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {day_name}")
    bot.send_message(message.chat.id, f"‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {day_name} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True)
def handle_text(message):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–ø—Ä–∞–≤–∏–ª: {message.text}")
    if message.text.lower() in ['–ø—Ä–∏–≤–µ—Ç', 'hello', 'hi']:
        bot.send_message(message.chat.id, f"–ü—Ä–∏–≤–µ—Ç! üëã –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º.")
    else:
        bot.send_message(message.chat.id, "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ üì±")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    print("=" * 50)
    print("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    print("–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    print("=" * 50)
    
    try:
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        bot.infinity_polling()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}")
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
